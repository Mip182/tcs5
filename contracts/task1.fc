#include "imports/stdlib.fc";

(int, int, slice, int) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(256),
        ds~load_uint(32),
        ds~load_msg_addr(),
        ds~load_uint(32)
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);

    if (op == 0x9df10277) {
        cell info = in_msg~load_ref();

        slice cs = info.begin_parse();

        (int locked_for, int new_seqno) = (cs~load_uint(32), cs~load_uint(32));

        (int public_key, int execution_time, slice receiver, int seqno) = load_data();

        throw_unless(119, new_seqno == (seqno + 1));

        in_msg~load_uint(64);

        var signature = in_msg~load_bits(512);

        throw_unless(120, check_signature(cell_hash(info), signature, public_key));
        throw_unless(121, locked_for > 0);
        throw_unless(122, execution_time >= now());

        int new_execution_time = now() + locked_for;

        throw_unless(123, new_execution_time >= execution_time);

        accept_message();

        set_data(begin_cell().store_uint(public_key, 256).store_uint(new_execution_time, 32).store_slice(receiver).store_uint(new_seqno, 32).end_cell());

    } elseif (op == 0xbb4be234) {
        slice ds = get_data().begin_parse();
        ds~load_uint(256);
        int execution_time = ds~load_uint(32);

        throw_unless(124, execution_time <= now());

        accept_message();

        send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(ds~load_msg_addr())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers (see sending messages page)
        .store_uint(0, 32)
        .end_cell(), 128);
    }
}

int get_seqno() method_id {
    (_, _, _, int seqno) = load_data();
    return seqno;
}

int get_execution_time() method_id {
    (_, int execution_time, _, _) = load_data();
    return execution_time;
}
