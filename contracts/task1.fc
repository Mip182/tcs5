#include "imports/stdlib.fc";

(int, int, slice, int) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(256),
        ds~load_uint(32),
        ds~load_msg_addr(),
        ds~load_uint(32)
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {
    if (in_msg.slice_empty?()) {
        return ();
    }

    (int public_key, int execution_time, slice receiver, int seqno) = load_data();

    int op = in_msg~load_uint(32);

    int query_id = in_msg~load_uint(64);

    if (op == 0x9df10277) {
        var signature = in_msg~load_bits(512);

        cell info = in_msg~load_ref();

        var hash = cell_hash(info);

        slice cs = info.begin_parse();

        (int locked_for, int new_seqno) = (cs~load_uint(32), cs~load_uint(32));

        throw_unless(119, new_seqno == seqno + 1);
        throw_unless(120, check_signature(hash, signature, public_key));
        throw_unless(121, locked_for > 0);
        throw_unless(122, execution_time >= now());
        throw_unless(123, now() + locked_for >= execution_time);

        accept_message();
;;        in_msg~touch(); ;; maybe delete, IDK

        if (execution_time == 0) {
            set_data(begin_cell().store_uint(public_key, 256).store_uint(now() + locked_for, 32).store_slice(receiver).store_uint(seqno, 32).end_cell());
        } else {
            set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time + locked_for, 32).store_slice(receiver).store_uint(seqno, 32).end_cell());
        }

    } elseif (op == 0xbb4be234) {
        throw_unless(124, execution_time <= now());

        cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(receiver)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers (see sending messages page)
        .store_uint(0, 32)
        .end_cell();

        send_raw_message(msg, 128);
    }
}

int get_seqno() method_id {
    (_, _, _, int seqno) = load_data();
    return seqno;
}

int get_execution_time() method_id {
    (_, int execution_time, _, _) = load_data();
    return execution_time;
}
