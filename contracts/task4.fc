#include "imports/stdlib.fc";

forall X -> (tuple) to_tuple (X x) asm "NOP";

global int default_value;

global int codeOfExclamation;
global int codeOfE;
global int codeOfS;
global int codeOfX;
global int codeOfQuestion;
global int start_x;
global int start_y;
global int end_x;
global int end_y;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

tuple insert_tuple(tuple t, tuple x, int k) asm """
  // t x k
  SETINDEXVAR
""";

tuple insert_int(tuple t, int x, int k) asm """
  // t x k
  SETINDEXVAR
""";

tuple update_int(tuple was, int new_val, int x, int y) inline {
    tuple row = was.at(x);

    tuple new_row = insert_int(row, new_val, y);

    return insert_tuple(was, new_row, x);
}

global int N;

tuple get_the_same_tuple_int(int x, int n) asm """
    DUP
    N SETGLOB
    DEC
    REPEAT:<{	//  x
    DUP
  }>
    N GETGLOB TUPLEVAR
""";

tuple get_the_same_tuple_tuple(tuple x, int n) asm """
    DUP
    N SETGLOB
    DEC
    REPEAT:<{	//  x
    DUP
  }>
    N GETGLOB TUPLEVAR
""";

tuple pop_back_and_put_to_beg(tuple x) asm """
    TPOP
    SETFIRST
""";

int get_first_el(tuple x) asm """
    FIRST
""";


(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    codeOfExclamation = 33;
    codeOfE = 83;
    codeOfS = 69;
    codeOfX = 88;
    codeOfQuestion = 63;

    start_x = -1;
    start_y = -1;
    end_x = -1;
    end_y = -1;


    default_value = (1 << 40);

    tuple d = get_the_same_tuple_tuple(get_the_same_tuple_int(default_value, m), n);
    {
        int i = 0;
        repeat (n) {
            tuple row = maze.at(i);

            int j = 0;
            repeat (m) {
                int val = row.at(j);

                if (val == codeOfS) {
                    start_x = i;
                    start_y = j;

                    d = update_int(d, 0, i, j);
                } elseif (val == codeOfE) {
                    end_x = i;
                    end_y = j;
                }

                j += 1;
            }

            i += 1;
        }
    }

    if (n > 8) {
        int set_size = 35;

        cell s = new_dict();

        var empty_slice = "";

        s~udict_set(set_size, (start_x << 5) | start_y, empty_slice);
        while (true) {
            (s, int key, _, _) = s.udict_delete_get_min(set_size);

            int new_min_val = key & ((1 << 10) - 1);
            int pos_x = (new_min_val >> 5);
            int pos_y = new_min_val & ((1 << 5) - 1);

            int cur_min = d.at(pos_x).at(pos_y);

            int cur_min_0 = (cur_min >> 10);

            if ((pos_x == end_x) & (pos_y == end_y)) {
                int new_pos_val = cur_min & ((1 << 10) - 1);
                int new_pos_x = (new_pos_val >> 5);
                int new_pos_y = new_pos_val & ((1 << 5) - 1);

                pos_x = new_pos_x;
                pos_y = new_pos_y;

                while ((pos_x != start_x) | (pos_y != start_y)) {
                    maze = update_int(maze, codeOfExclamation, pos_x, pos_y);

                    int new_pos_val = d.at(pos_x).at(pos_y) & ((1 << 10) - 1);
                    int new_pos_x = new_pos_val >> 5;
                    int new_pos_y = new_pos_val & ((1 << 5) - 1);

                    pos_x = new_pos_x;
                    pos_y = new_pos_y;
                }

                return (cur_min_0 >> 20, (cur_min_0 & ((1 << 20) - 1)) >> 10, (cur_min_0 & ((1 << 10) - 1)), maze);
            }

            int count_rep_y = 1 + ((pos_y == 0) ? 0 : 1) + ((pos_y + 1 == m) ? 0 : 1);
            int diff_y_beg = (pos_y == 0) ? 0 : -1;
            int diff_x = (pos_x == 0) ? 0 : -1;
            int count_rep_x = 1 - diff_x + ((pos_x + 1 == n) ? 0 : 1);
            int x = pos_x + diff_x;
            repeat (count_rep_x) {
                tuple row = d.at(x);
                tuple row_maze = maze.at(x);

                int y = pos_y + diff_y_beg;
                repeat (count_rep_y) {
                    int val = row.at(y);

                    int char = row_maze.at(y);

                    int new_val = cur_min_0 + 1;

                    if (char == codeOfX) {
                        new_val += (1 << 20);
                    } elseif (char == codeOfQuestion) {
                        new_val += (1 << 10);
                    }

                    if ((val >> 11) > new_val) {
                        d = update_int(d, ((new_val << 10) | (pos_x << 5) | pos_y), x, y);

                        s~udict_set(set_size, (new_val << 10) | (x << 5) | y, empty_slice);
                    }

                    y += 1;
                }

                x += 1;
            }

        }
    } else {
        tuple heap = empty_tuple();

        int heap_size = 1;

        heap~tpush((start_x << 5) | start_y);

        while (true) {
            int key = get_first_el(heap);

            heap_size -= 1;
            if (heap_size > 0) {
                heap = pop_back_and_put_to_beg(heap);

                int now = 0;
                int was = get_first_el(heap);
                while (now < heap_size) {
                    int now1 = 2 * now + 1;
                    if (now1 < heap_size) {
                        int now2 = now1 + 1;
                        int val1 = heap.at(now1);
                        if (now2 == heap_size) {
                            if (val1 < was) {
                                heap = insert_int(heap, was, now1);
                                heap = insert_int(heap, val1, now);
                            }
                            now = heap_size;
                        } else {
                            int val2 = heap.at(now2);
                            if (val1 < val2) {
                                if (was < val1) {
                                    now = heap_size;
                                } else {
                                    heap = insert_int(heap, was, now1);
                                    heap = insert_int(heap, val1, now);

                                    now = now1;
                                }
                            } else {
                                if (was < val2) {
                                    now = heap_size;
                                } else {
                                    heap = insert_int(heap, was, now2);
                                    heap = insert_int(heap, val2, now);

                                    now = now2;
                                }
                            }
                        }
                    } else {
                        now = heap_size;
                    }
                }
            } else {
                heap = empty_tuple();
            }

            int new_min_val = key & ((1 << 10) - 1);
            int pos_x = (new_min_val >> 5);
            int pos_y = new_min_val & ((1 << 5) - 1);

            int cur_min = d.at(pos_x).at(pos_y);

            int cur_min_0 = (cur_min >> 10);

            if ((pos_x == end_x) & (pos_y == end_y)) {
                int new_pos_val = cur_min & ((1 << 10) - 1);
                int new_pos_x = (new_pos_val >> 5);
                int new_pos_y = new_pos_val & ((1 << 5) - 1);

                pos_x = new_pos_x;
                pos_y = new_pos_y;

                while ((pos_x != start_x) | (pos_y != start_y)) {
                    maze = update_int(maze, codeOfExclamation, pos_x, pos_y);

                    int new_pos_val = d.at(pos_x).at(pos_y) & ((1 << 10) - 1);
                    int new_pos_x = new_pos_val >> 5;
                    int new_pos_y = new_pos_val & ((1 << 5) - 1);

                    pos_x = new_pos_x;
                    pos_y = new_pos_y;
                }

                return (cur_min_0 >> 20, (cur_min_0 & ((1 << 20) - 1)) >> 10, (cur_min_0 & ((1 << 10) - 1)), maze);
            }

            int count_rep_y = 1 + ((pos_y == 0) ? 0 : 1) + ((pos_y + 1 == m) ? 0 : 1);
            int diff_y_beg = (pos_y == 0) ? 0 : -1;
            int diff_x = (pos_x == 0) ? 0 : -1;
            int count_rep_x = 1 - diff_x + ((pos_x + 1 == n) ? 0 : 1);
            int x = pos_x + diff_x;
            repeat (count_rep_x) {
                tuple row = d.at(x);
                tuple row_maze = maze.at(x);

                int y = pos_y + diff_y_beg;
                repeat (count_rep_y) {
                    int val = row.at(y);

                    int char = row_maze.at(y);

                    int new_val = cur_min_0 + 1;

                    if (char == codeOfX) {
                        new_val += (1 << 20);
                    } elseif (char == codeOfQuestion) {
                        new_val += (1 << 10);
                    }

                    if ((val >> 11) > new_val) {
                        d = update_int(d, ((new_val << 10) | (pos_x << 5) | pos_y), x, y);

                        int was = (new_val << 10) | (x << 5) | y;
                        heap~tpush(was);
                        int now = heap_size;
                        heap_size += 1;
                        while (now != 0) {
                            int prev = (now - 1) / 2;
                            int val1 = heap.at(prev);
                            if (val1 > was) {
                                heap = insert_int(heap, was, prev);
                                heap = insert_int(heap, val1, now);

                                now = prev;
                            } else {
                                now = 0;
                            }
                        }
                    }

                    y += 1;
                }

                x += 1;
            }

        }

    }


    return (-1,0,0,null());
}

