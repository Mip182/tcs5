#include "imports/stdlib.fc";

forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
;;    #X, #?, # of moves, used, which cell is parent
    tuple default_value = to_tuple([1000, 1000, 1000, 0, -1, -1]);

    int start_x;
    int start_y;
    int end_x;
    int end_y;

    tuple d = empty_tuple();
    repeat (n) {
        tuple cur = empty_tuple();
        repeat (m) {
            cur~tpush(default_value);
        }

        d~tpush(d);
    }

    {
        int i = 0;
        repeat (n) {
            tuple row = maze.at(i);

            int j = 0;
            repeat(m) {
                int val = row.at(j);

                if (val == "S") {
                    start_x = i;
                    start_y = j;
                } elseif (val == "E") {
                    end_x = i;
                    end_y = j;
                }

                j += 1;
            }

            i += 1;
        }
    }

    repeat(1000) {
        return (-1, -1, -1, null());
    }

    return (-1, -1, -1, null());
}
